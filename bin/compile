#!/usr/bin/env ruby

# sync output
$stdout.sync = true
$stderr.sync = true

# 2014-09-28T15:39:44.70-0700 [STG]     OUT        /usr/lib/libsqlite3.so.0.8.6
# 2014-09-28T15:39:44.70-0700 [STG]     OUT        /usr/lib/libsqlite3.so
# 2014-09-28T15:39:44.70-0700 [STG]     OUT        /usr/lib/libsqlite.so.0
# 2014-09-28T15:39:44.70-0700 [STG]     OUT        /usr/lib/libsqlite.so
# 2014-09-28T15:39:44.70-0700 [STG]     OUT        /usr/lib/libsqlite3.so.0
# 2014-09-28T15:39:44.70-0700 [STG]     OUT        /usr/lib/libsqlite.so.0.8.6

$stderr.puts `find / -name '*sqlite*'`


$:.unshift File.expand_path("../../lib", __FILE__)
require "language_pack"
require "language_pack/shell_helpers"

require 'cloud_foundry/language_pack/extensions'

LanguagePack::Instrument.trace 'compile', 'app.compile' do
  if pack = LanguagePack.detect(ARGV[0], ARGV[1])
    LanguagePack::ShellHelpers.initialize_env(ARGV[2])

    cache_dir = ARGV[0]
    $stderr.puts "cache_dir: #{cache_dir.inspect}"

    pid = Process.spawn <<-"EOT"
      cd "#{cache_dir}"
      mkdir sqlite
      curl -o sqlite.zip 'http://www.sqlite.org/snapshot/sqlite-amalgamation-201409200035.zip'
      unzip sqlite.zip -d sqlite
      cd sqlite
      mkdir include
      mkdir lib
      cp sqlite3.h include/
      gcc -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_THREADSAFE=1 -O2 -c -o lib/libsqlite3.o -fPIC -lpthread -ldl sqlite3.c
      ar rcs lib/libsqlite3.a lib/libsqlite3.o
      gcc -shared -o lib/libsqlite3.so lib/libsqlite3.o
      cp lib/libsqlite3.so lib/libsqlite.so
      cp lib/libsqlite3.so lib/libsqlite3.so.0.8.6
      cp lib/libsqlite3.a lib/libsqlite.a
      cp lib/libsqlite3.a lib/libsqlite.la
      cp lib/libsqlite3.a lib/libsqlite3.la
    EOT
    Process.wait(pid)

    ENV['BUNDLE_BUILD__SQLITE3'] = "--with-opt-dir=#{cache_dir}/sqlite --with-cppflags=\"-v -Wl,-v\" --with-ldflags=\"-v -Wl,-v -L#{cache_dir}/sqlite\" -print-search-dirs"

    pack.topic("Compiling #{pack.name}")
    pack.log("compile") do
      pack.compile
    end
  end
end

pid = Process.spawn <<"EOT"
  find / -name 'mkmf.log' | grep sqlite | xargs cat
EOT
Process.wait(pid)
